# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
matrix (c(1,2,3,4,5,6), nr = 2)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/2.Fundamentos-da-Linguagem-R")
getwd()
lista_caracter1 = list('A', 'B', 'C')
lista_caracter1
lista_caracter2 = list(c('A', 'A'), 'B', 'C')
lista_caracter2
lista_caracter3 = list(matrix(c('A', 'A', 'A', 'A'), nr = 2), 'B', 'C')
lista_caracter3
# Lista de números inteiros
lista_inteiros = list(2, 3, 4)
lista_inteiros
# Lista de floats
lista_numerico = list(1.90, 45.3, 300.5)
lista_numerico
# Lista de números complexos
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
# Lista de valores lógicos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
lista_composta1 = list('A', 3, TRUE)
lista_composta1
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha'), rnorm(10))
lista1
?rnorm
# Slicing (fatiamento) da Lista
lista1[1]
lista1[2]
lista1[c(1,2)]
lista1[2]
lista1[c(1,2)]
lista1[c(1,2,3)]
lista1[2][1]
# Slicing (fatiamento) da Lista
lista1[1]
lista1[2]
lista1[2][1]
lista1[[2]][1]
lista1[[2]][2]
lista1[[1]][1]
lista1[[2]][2] # [1] "Ronaldo"
lista1[2][1] = 'Monica'
lista1
lista1[2][1] = 'Monica' + 'Eduardo'
lista1[2][1] = 'Monica' , 'Eduardo'
lista1[2][1] = ('Monica','Eduardo')
lista1[2][1] = c('Monica', 'Eduardo')
lista1[2][1] = 'Monica'
lista1
# ' 1:10 ' vetor numérico | c('Zico'...) vetor de string
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha'), rnorm(10))
lista1
lista1[2][1] = 'Monica'
lista1
lista1[[2]][2] # [1] "Ronaldo"
lista1[2] = c('Monica', 'Eduardo')
lista1[2] <- c('Monica', 'Eduardo')
lista1
lista1[2] = 'Monica'
lista1
names(lista1) <- c('Inteiros', 'Caracteres', 'Numéricos')
lista1
vec_numero <- 1:4
vec_caractere <- c('A', 'B', 'C', 'D')
lista2 <- list(Numeros = vec_numero, Letras = vec_caractere)
lista2
lista3 <- list(Elemento1 = 3:5, Elemento2 = c(7.2, 8.5))
lista3
# Forma 3 (nomeando diretamente)
lista3 <- list(Elemento 1 = 3:5, Elemento 2 = c(7.2, 8.5))
# Forma 3 (nomeando diretamente)
lista3 <- list(Elemento1 = 3:5, Elemento2 = c(7.2, 8.5))
lista3
# Trabalhando com elementos específicos da Lista
lista4 <- list(1:10, c('Iron Maiden', 'Guns N Roses', 'Nirvana'), rnorm(10))
lista4
names(lista4) <- c('Nº Inteiros', 'Bandas Caracters', 'Nº Numéricos')
lista4
lista4$`Bandas Caracters`
length(lista4$`Nº Inteiros`)
lista4$`Nº Inteiros`
# Verificar o comprimento da lista
length(lista1)
length(lista4)
lista1
# ' 1:10 ' vetor numérico | c('Zico'...) vetor de string
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Garrincha'), rnorm(10))
lista1
lista1[[2]][1] = 'Monica'
lista1
# Verificar o comprimento da lista
length(lista1)
# Podemos extrair um elemento específico dentro de cada nível da lista
lista4$`Bandas Caracters`[2]
mode(lista4$`Nº Inteiros`)
mode(lista4$`Nº Numéricos`)
mode(lista4$`Bandas Caracters`)
lista5 <- c(lista1, lista4)
lista5
lista5[1]
lista5[2]
lista5[3]
lista5[4]
v = c(1:3)
v
l = as.list(v)
l
# Operações com Strings
# Configurando DiretÃ³rio de Trabalho
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/2.Fundamentos-da-Linguagem-R")
getwd()
# String
# Operações com Strings
# Configurando DiretÃ³rio de Trabalho
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/2.Fundamentos-da-Linguagem-R")
getwd()
# String
texto <- "Isso é uma string!"
texto
x = as.character(3.14)
x
class(x)
nome = 'Lionel'; sobrenome = 'Messi'
paste(nome, sobrenome)
cat(nome, sobrenome)
substr(texto, start = 12, stop = 17)
?substr
nchar(texto)
tolower('Histograma e Elementos de Dados')
toupper('Histograma e Elementos de Dados')
library(stringr)
?stringr
strsplit('Histogramas e Elementos de Dados') # transforma em lista de caracteres
strsplit('Histogramas e Elementos de Dados', NULL) # transforma em lista de caracteres
strsplit('Histogramas e Elementos de Dados', 2) # transforma em lista de caracteres
strsplit('Histogramas e Elementos de Dados', 4) # transforma em lista de caracteres
strsplit('Histogramas e Elementos de Dados', 24) # transforma em lista de caracteres
?strsplit
strsplit('Histogramas e Elementos de Dados', ' ')
strsplit('Histogramas e Elementos de Dados', '')
strsplit("Histogramas e Elementos de Dados", " ")
string1 = c('Esta é a primeira parte da minha string e será a primeira parte do meu vetor',
'Aqui a minha string continua, mas será transformada no segundo vetor')
string1
string2
string2 = c('Precisamos testar outras strings - @???!$&ñ',
'Análise de Dados em R')
string2
str_c(c(string1, string2))
str_c(c(string1, string2), sep = "")
str_c(c(string1, string2), sep = " ")
str_c(c(string1, string2), sep = "2")
str_count(string2, 's')
str_locate_all(string2, 's')
str_locate(string2, 's')
str_replace(string2, 'testar', '')
str_replace(string2, '\\s', '')
str_replace(string2, '\\s', '    ')
str_replace(string2, '\\s', 'XXX')
str_replace(string2, '\\d', 'XXX')
str_replace(string2, '\\e', 'XXX')
str_replace(string2, '\\s', 'XXX')
str_replace(string2, 'testar', 'XXX')
str_replace_all(string2, '\\s', 'XXX')
str_replace_all(string2, '\\s', '')
str_replace_all(string2, ' ', '')
str_replace_all(string2, '\\s', '')
string3 <- "17 jan 2001"
string4 <- "1 jan 2001"
padrao <- 'jan 20'
grep1(pattern = padrao, x = string3)
grepl(pattern = padrao, x = string3)
padrao2 <- 'jan20'
grepl(pattern = padrao2, x = string3)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/2.Fundamentos-da-Linguagem-R")
getwd()
df <- data.frame()
class(df)
df
df
df <- data.frame()
class(df)
df
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes, idades, itens, codigos))
df
df
pais = c('Portugal', 'Inglaterra', 'Irlanda', 'Egito', 'Brasil')
nome = c('Bruno', 'Tiago', 'Amanda', 'Bianca', 'Marta')
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando um DataFrame de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
?cbind
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4, mat5) # cbind = combinar por coluna
rbind(mat4, mat5) # rbind = combinar por linha
pesquisa
pesquisa
olhos = c('verde', 'azul', 'azul', 'castanho', 'castanho')
pesq = cbind(pesquisa, olhos) # cbind = combinar por coluna
pesq
olhos = c('verde', 'azul', 'azul', 'castanho')
pesq = cbind(pesquisa, olhos) # cbind = combinar por coluna
pesq
pesq = cbind(pesquisa, olhos) # cbind = combinar por coluna
olhos = c('verde', 'azul', 'azul', 'castanho', 'castanho')
pesq = cbind(pesquisa, olhos) # cbind = combinar por coluna
pesq
str(pesq)
dim(pesq)
length(pesq)
pesq = rbind(pesquisa, olhos) # une dataframe pesquisa com olhos em pesq a nivel de coluna
olhos = c('verde', 'azul', 'azul', 'castanho', 'castanho')
pesq = rbind(pesquisa, olhos) # une dataframe pesquisa com olhos em pesq a nivel de coluna
pesq
pesq = cbind(pesquisa, olhos) # une dataframe pesquisa com olhos em pesq a nivel de coluna
pesq
str(pesq)
str(pesq)
pesq$pais
pesq$nome
length(pesq$pais)
# Extraindo um único valor
pesq[1,1]
# Extraindo um único valor
pesq[0,1]
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
pesq
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
pesq[1,2]
# Extraindo um único valor
pesq[0,0]
# Extraindo um único valor
pesq[0,1]
# Extraindo um único valor
pesq[0,2]
# Extraindo um único valor
pesq[1,0]
# Extraindo um único valor
pesq[1,1]
pesq[1,2]
pesq[1,3]
pesq[2,1]
pesq[2,2]
nrow(pesq)
ncol(pesq)
head(pesq)
head(mtcarts)
head(mtcars)
tail(pesq)
tail(mtcars)
# DataFrames built-in do R
?mtcars
mtcars
View(mtcars)
pesq
pesq[altura < 1.60]
pesq[altura < 1.60,]
pesq[altura > 1.60,] # filtra com altura maior que 1.60
pesq[altura > 1.60, c("codigo", "olhos")]
pesq
# DataFrames nomeados
names(pesq) <- c('Pais', 'Nome', 'Altura', 'Código', 'Olhos')
pesq
colnames(pesq) <- c('Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5')
rownames(pesq) <- c('Lin 1', 'Lin 2', 'Lin 3', 'Lin 4', 'Lin 5')
pesq
names(pesq) <- c('Pais', 'Nome', 'Altura', 'Código', 'Olhos')
pesq
?read.csv
pacientes <- data.frame(read.csv(file = 'pacientes.csv'), header = TRUE, sep = ',')
pacientes
pacientes <- data.frame(read.csv(file = 'pacientes.csv'))
pacientes
pacientes <- data.frame(read.csv(file = 'pacientes.csv'), header = TRUE, sep = ',')
pacientes
# Visualizando o dataset
View(pacientes)
# Visualizando o dataset
view(pacientes)
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ,")) # header = cabeçalho | sep = separador
pacientes
# Visualizando o dataset
View(pacientes)
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ",")) # header = cabeçalho | sep = separador
pacientes
pacientes
pesq
?read.csv
pesquisa
?read.csv
