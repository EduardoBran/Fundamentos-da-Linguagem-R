# checando NA em vento
dados_temp[!complete.cases(dados_temp$Vento), ]
dados_temp
summary(dados_temp$Vento)
dados_temp[is.na(dados_temp$Vento)]$Vento
dados_temp[is.na(dados_temp$Vento), ]$Vento
dados_temp[is.na(dados_temp$Vento), ]$Vento = "FALSO"
dados_temp[is.na(dados_temp$Vento), ]$Vento
summary(dados_temp$Vento)
# exibindo resumo
summary(dados_temp)
hist(trees$Height)
hist(trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue')
# Histograma
hist(trees$Height)
hist(trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue')
hist(
trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue',
density20, breaks=20
)
hist(trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue',
density20, breaks=20
)
hist(
trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue',
density=20, breaks=20
)
hist(trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue')
hist(
trees$Height, main="Árvores", ylab="Frequência", xlab="Altura", col='Blue',
density=20, breaks=20
)
trees # conjunto de dados importado do R
hist(trees$Height)
plot(densidade)
# Densidade
densidade = density(trees$Height)
plot(densidade)
# Gerando os gráficos acima no mesmo
# Densidade sobre o Histograma, parâmerto par
hist(trees$Height, main=NULL, xlab=NULL)
par(new=TRUE)
plot(densidade)
# Gerando os gráficos acima no mesmo
# Densidade sobre o Histograma, parâmerto par
hist(trees$Height, main=NULL, xlab=NULL, ylab=NULL)
par(new=TRUE)
plot(densidade)
plot(trees$Girth, trees$Volume)
plot(trees$Girth, trees$Volume, main='Árvores')
plot(trees$Girth, trees$Volume, main='Árvores', ylab='circunferência', xlab='Volume', col='Blue')
# pch muda o elemento gráfico
plot(trees$Girth, trees$Volume, main='Árvores', ylab='circunferência', xlab='Volume', col='Blue', pch=20)
# mudando o tipo do pch (gerar linhas)
plot(trees$Girth, trees$Volume, main='Árvores', ylab='circunferência', xlab='Volume', col='Blue', pch=20, type='l')
plot(jitter(trees$Girth), trees$Volume, main='Árvores', ylab='circunferência', xlab='Volume', col='Blue', pch=20)
# dados de CO@
CO2
plot(CO2$conc, CO2$uptake, pch=20, col=CO2$Treatment)
legend("bottomright", legend=c("nonchilled", "chilled"), cex=1, fill=c("black", "red"))
# Legenda com dimensão categórica
# dados de CO2
CO2
plot(CO2$conc, CO2$uptake, pch=20, col=CO2$Treatment)
legend("bottomright", legend=c("nonchilled", "chilled"), cex=1, fill=c("black", "red"))
# Novos dados
plot(trees)
# Divisão da Tela (executar com ctrl shif enter)
split.screen(figs=c(2,2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all=TRUE)
# Boxplot
boxplot(trees$Volume, main="Árvores", xlab="Volume")
boxplot(trees$Volume, main="Árvores", xlab="Volume", col='Blue', horizontal=TRUE)
boxplot(trees$Volume, main="Árvores", xlab="Volume", col='Blue', outline=F)
# notch (gera um talho no boxplot)
boxplot(trees$Volume, main="Árvores", xlab="Volume", col='Blue', notch=TRUE)
# dados do gráfico
boxplot.stats(trees$Height)
# lê apenas uma informação
boxplot.stats(trees$Height)$stats
# dados do gráfico (dados usados para gerar o boxplot)
boxplot.stats(trees$Height)
boxplot.stats(trees$Height)$out
# dados do gráfico (dados usados para gerar o boxplot)
boxplot.stats(trees$Height)
# Vários gráficos
boxplot(trees)
InsectSprays
spray
# Agregação
InsectSprays # ja vem com o R
spray = aggregate(. ~ spray, data=InsectSprays, sum)
spray
spray = aggregate(. ~ spray, data=InsectSprays, sum)
spray = aggregate(. ~ spray, data=InsectSprays, sum)
spray = aggregate(. ~ spray, data=InsectSprays, sum)
spray
# Agregação
InsectSprays # ja vem com o R
# criando um resumo dos dados de InsectSprays
spray = aggregate(. ~ spray, data=InsectSprays, sum)
spray
# com a variável spray pronta (agregada) podemos gerar o Gráfico de Barras
# Gráfico de Barras (executar com ctrl shift enter)
barplot(spray$count, col=gray.colors(6), xlab="Spray", ylab="Total", names.arg=spray$spray)
box()
# Gráfico de Setor (Pizza)
pil(spray$count, labels=spray$spray, main="Spray", col=c(1:6))
# Gráfico de Setor (Pizza)
pie(spray$count, labels=spray$spray, main="Spray", col=c(1:6))
# Gráfico de Setor (Pizza)
pie(spray$count, labels=spray$spray, main="Spray", col=c(1:7))
# Gráfico de Setor (Pizza)
pie(spray$count, labels=spray$spray, main="Spray", col=c(1:8))
# Gráfico de Setor (Pizza)
pie(spray$count, labels=spray$spray, main="Spray", col=c(4:8))
# Gráfico de Setor (Pizza)
pie(spray$count, labels=spray$spray, main="Spray", col=c(1:8))
# Gráfico de Setor (Pizza)
pie(spray$count, labels=spray$spray, main="Spray", col=c(1:6))
pie(spray$count, labels=spray$spray, main="Spray", col=c(1:6))
legend("bottomright", legend=spray$spray, cex=1, fill=c(1:6))
pie(spray$count, labels=NA, main="Spray", col=c(1:6))
legend("bottomright", legend=spray$spray, cex=1, fill=c(1:6))
install.packages("stargazer")
library(stargazer)
stargazer(iris)
stargazer(iris, type='html')
stargazer(iris, type='text')
stargazer(women, out = "women.tex", summary=FALSE)
library(lattice)
bwplot(trees$Volume)
bwplot(trees$Volume, main="Árvores", xlab="Volume")
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=4, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=0.1, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=0.5, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=.9, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=40, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=10, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=50, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=20, type='percent')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=20, type='count')
histogram(trees$Volume, main="Árvores", xlab="Volume", aspect=1, nint=20, type='percent')
# base de dados com peso das galinhas de acordo com alimentação
chickwts
# histograma
histogram(chickwts$weight)
# agregando dados
aggregate(chickwts$weight, by=list(chickwts$feed), FUN=sum)
# histograma condicional
histogram (~weight | feed, data=chickwts)
CO2
xyplot(CO2$conc ~ CO2$uptake)
# diagrama de dispersão condicionao ao titulo (Type)
xyplot(CO2$conc ~ CO2$uptake | CO2$Type)
# diagrama de dispersão condicionao ao titulo (Refrigerado)
xyplot(CO2$conc ~ CO2$uptake | CO2$Type)
# diagrama de dispersão condicionao ao titulo (Refrigerado)
xyplot(CO2$conc ~ CO2$uptake | CO2$Treatment)
esoph
dotplot(esoph$alcgp ~ esoph$ncontrols, data=esoph)
# base de dados
esoph
dotplot(esoph$alcgp ~ esoph$ncontrols, data=tobgp)
# condicao para ver se consumiu tabaco ou nao
dotplot(esoph$alcgp ~ esoph$ncontrols | esoph$tobgp)
# Matriz de Dispersão
splom(~CO@[4:5] | CO2$Type, CO2)
# Matriz de Dispersão
splom(~CO2[4:5] | CO2$Type, CO2)
# Densidade Condicional
densityplot(~CO2$conc | CO2$Treatment, plot.points=FALSE)
densityplot(~CO2$conc)
densityplot(~CO2$conc | CO2$Treatment, plot.points=FALSE)
# Densidade Condicional
densityplot(~CO2$conc)
densityplot(~CO2$conc | CO2$Treatment, plot.points=FALSE)
# Densidade Condicional
densityplot(~CO2$conc)
densityplot(~CO2$conc | CO2$Treatment)
densityplot(~CO2$conc | CO2$Treatment, plot.points=FALSE)
# Spray para repelir abelhas
OrchardSprays
cloud(decrease ~ rowps * colpos, data=OrchardSprays)
cloud(decrease ~ rowpos * colpos, data=OrchardSprays)
cloud(decrease ~ rowpos * colpos, groups=treatment, data=OrchardSprays)
# Circunferência, largura e volume de árvores
trees
levelplot(Girth ~ Height * Volume, data=tress)
levelplot(Girth ~ Height * Volume, data=trees)
# lendo dados (empenho em diárias em municípios gaúchos e PIB do munícipio)
dados = read.csv("dados.csv", sep = ";", na.strings = "", stringsAsFactors = T)
dados
summary(dados)
# lendo dados (empenho em diárias em municípios gaúchos e PIB do munícipio)
dados = read.csv("dados.csv", sep = ";", na.strings = "", stringsAsFactors = T)
dados
summary(dados)
dados
summary(dados)
# lendo dados (empenho em diárias em municípios gaúchos e PIB do munícipio)
dados = read.csv("dados.csv", sep = ";", na.strings = "", stringsAsFactors = T)
dados
summary(dados)
summary(dados$CODIGO)
summary(dados$MUNICIPIO)
summary(dados$PIB)
summary(dados$VALOREMPENHO)
summary(dados$CODIGO)
summary(dados$MUNICIPIO)
summary(dados$PIB)
summary(dados$VALOREMPENHO)
dados
summary(dados$MUNICIPIO)
summary(dados$CODIGO)
# Valores faltantes (NAs)
dados[!complete.cases(dados),] # exibe todas as linhas com NAs
library(lattice)
bwplot(dados)
bwplot(dados$CODIGO)
dados
bwplot(dados$PIB)
bwplot(dados$PIB, main="PIB")
bwplot(dados$VALOREMPENHO, main="VALOR DE EMEPENHO")
histogram(dados$PIB, main="PIB", xlab="Volume", aspect=1, nint=20, type='percent')
amostra
# 150 amostras, de 0 e 1, com reposição, problemas equivalentes
amostra = sample(c(0, 1)), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
# 150 amostras, de 0 e 1, com reposição, problemas equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
amostra
summary(as.factor(amostra))
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
```{r}
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, probabilidade equivalentes
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.5, 0.5))
amostra
summary(as.factor(amostra))
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
amostra
summary(as.factor(amostra))
amostra
# 150 amostras, de 0 e 1, com reposição, mais chances para zero
amostra = sample(c(0, 1), 150, replace = FALSE)
amostra
amostra
amostra
amostra2
# 150 amostras, de 0 e 1, sem reposição, mais chances para zero
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# 150 amostras, de 0 a 1000, sem reposição, mais chances para zero
# nao repete numeros
amostra2 = sample(c(0:1000), 150, replace = FALSE)
amostra2
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
# Gerando amostra de conjunto de dados Iris
# Gerando 30% dos dados de iris
amostra = sample(c(0, 1), 150, replace = TRUE, prob=c(0.7, 0.3))
summary(as.factor(amostra))
amostrairis
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
2 + 2
x <= 4
x <- 4
x
x = 5
x
setwd("C:/Users/Julia/Desktop/Ciência de Dados/1. Big Data Analytics com R e Microsoft Azure Machine Learning/2. Fundamentos da Linguagem R")
getwd()
licence()
# Nome dos Contributors
contributors()
# Licença de Uso
licence()
# Nome dos Contributors
contributors()
# Licença de Uso
licence()
# Informações sobre a sessão
sessionInfo()
# Imprimir na tela
print('Estou iniciando minha caminhada na carreira Cientista de Dados')
# Criar gráficos
plot(1:25)
install.packages('randomForest')
install.packages("caret")
install.packages('ggplot2')
install.packages('ggplot2')
install.packages('dplyr')
install.packages('devtools')
# Carregar o pacote
library(ggplot2)
# Descarregar o pacote
detach(package:ggplot2)
detach(package:ggplot5)
# Sabendo o nome da função, vamos descobrir o que faz a função mean
helm
# Sabendo o nome da função, vamos descobrir o que faz a função mean
# mean é uma função para calcular a média aritmética
help(mean)
?mean # mesma coisa acima
# pacote sos auxilia para buscar mais info sobre funções
install.packages('sos')
library(sos)
# dentro do pacte sos temos a função findFn
findFn('sos')
# dentro do pacte sos temos a função findFn
findFn('fread')
# se não souber o nome da função
help.search('randomForest')
help.search('matplot')
??matplot
# se não souber o nome da função
help.search('randomForest')
RSiteSearch('matplot')
example('matplot')
q()
